source("~/Dropbox/Modelagem/Probabilidade/MonteCarlo/MontecarloEnsaioMultiParam.R")
## Primeiro Momento
gamma_mom_1 = function(x){
return(c(mean(x),var(x)/mean(x)))
}
theta=matrix(c(c(1, 2),
c(0.5, 1),
c(3, 4),
c(0.1, 0.2)),
nrow=4, ncol=2,byrow=T)
data = EstPorMonteCarloMultiParam(fundist=rgamma,
est=c(mean, gamma_mom_1),
Theta=theta,
N=c(500, 1000),
R=1000
)
data
as.character(substitute(mean))
source("~/Dropbox/Modelagem/Probabilidade/MonteCarlo/MontecarloEnsaioMultiParam.R")
## Primeiro Momento
gamma_mom_1 = function(x){
return(c(mean(x),var(x)/mean(x)))
}
theta=matrix(c(c(1, 2),
c(0.5, 1),
c(3, 4),
c(0.1, 0.2)),
nrow=4, ncol=2,byrow=T)
data = EstPorMonteCarloMultiParam(fundist=rgamma,
est=c(mean, gamma_mom_1),
Theta=theta,
N=c(500, 1000),
R=1000
)
data
source("~/Dropbox/Modelagem/Probabilidade/MonteCarlo/MontecarloEnsaioMultiParam.R")
source("~/Dropbox/Modelagem/Probabilidade/MonteCarlo/MontecarloEnsaioMultiParam.R")
## Primeiro Momento
gamma_mom_1 = function(x){
return(c(mean(x),var(x)/mean(x)))
}
theta=matrix(c(c(1, 2),
c(0.5, 1),
c(3, 4),
c(0.1, 0.2)),
nrow=4, ncol=2,byrow=T)
data = EstPorMonteCarloMultiParam(fundist=rgamma,
est=c(mean, gamma_mom_1),
Theta=theta,
N=c(500, 1000),
R=1000
)
data
source("~/Dropbox/Modelagem/Probabilidade/MonteCarlo/MontecarloEnsaioMultiParam.R")
source("~/Dropbox/Modelagem/Probabilidade/MonteCarlo/MontecarloEnsaioMultiParam.R")
source("~/Dropbox/Modelagem/Probabilidade/MonteCarlo/MontecarloEnsaioMultiParam.R")
## Primeiro Momento
gamma_mom_1 = function(x){
return(c(mean(x),var(x)/mean(x)))
}
theta=matrix(c(c(1, 2),
c(0.5, 1),
c(3, 4),
c(0.1, 0.2)),
nrow=4, ncol=2,byrow=T)
data = EstPorMonteCarloMultiParam(fundist=rgamma,
est=c(mean, gamma_mom_1),
Theta=theta,
N=c(500, 1000),
R=1000
)
data
source("~/Dropbox/Modelagem/Probabilidade/MonteCarlo/MontecarloEnsaioMultiParam.R")
source("~/Dropbox/Modelagem/Probabilidade/MonteCarlo/MontecarloEnsaioMultiParam.R")
## Primeiro Momento
gamma_mom_1 = function(x){
return(c(mean(x),var(x)/mean(x)))
}
theta=matrix(c(c(1, 2),
c(0.5, 1),
c(3, 4),
c(0.1, 0.2)),
nrow=4, ncol=2,byrow=T)
data = EstPorMonteCarloMultiParam(fundist=rgamma,
est=c(mean, gamma_mom_1),
Theta=theta,
N=c(500, 1000),
R=1000
)
data
source("~/Dropbox/Modelagem/Probabilidade/MonteCarlo/MontecarloEnsaioMultiParam.R")
data = EstPorMonteCarloMultiParam(fundist=rgamma,
est=c(mean, gamma_mom_1),
Theta=theta,
N=c(500, 1000),
R=1000
)
source("~/Dropbox/Modelagem/Probabilidade/MonteCarlo/MontecarloEnsaioMultiParam.R")
## Primeiro Momento
gamma_mom_1 = function(x){
return(c(mean(x),var(x)/mean(x)))
}
theta=matrix(c(c(1, 2),
c(0.5, 1),
c(3, 4),
c(0.1, 0.2)),
nrow=4, ncol=2,byrow=T)
data = EstPorMonteCarloMultiParam(fundist=rgamma,
est=c(mean, gamma_mom_1),
Theta=theta,
N=c(500, 1000),
R=1000
)
data
obj <- list(
x = 1,
y = 2,
fun = function(z){
obj$x + z
}
)
obj$x
obj$y
obj$fun
obj$fun(6)
obj$x = 5
obj$fun(6)
methods(list)
require(graphics)
# create a plotting structure
pts <- list(x = cars[,1], y = cars[,2])
plot(pts)
is.pairlist(.Options)  # a user-level pairlist
## "pre-allocate" an empty list of length 5
vector("list", 5)
# Argument lists
f <- function() x
# Note the specification of a "..." argument:
formals(f) <- al <- alist(x = , y = 2+3, ... = )
f
al
## environment->list coercion
e1 <- new.env()
e1$a <- 10
e1$b <- 20
as.list(e1)
DefineUnif <- function(n=10, mu = 0, sigma = 1){
y <- list(
n = n,
mu = mu,
sigma = sigma,
x = runif(y$n, y$mu, y$sigma),
)
}
DefineUnif <- function(n=10, mu = 0, sigma = 1){
y <- list(
n = n,
mu = mu,
sigma = sigma,
x = runif(y$n, y$mu, y$sigma),
)
y
}
varunif <- DefineUnif()
DefineUnif <- function(n=10, mu = 0, sigma = 1){
y <- list(
n = n,
mu = mu,
sigma = sigma,
x = function(runif(y$n, y$mu, y$sigma)),
)
y
}
DefineUnif <- function(n=10, mu = 0, sigma = 1){
y <- list(
n = n,
mu = mu,
sigma = sigma,
x = function(){runif(y$n, y$mu, y$sigma)},
)
y
}
varunif <- DefineUnif()
DefineUnif <- function(n=10, mu = 0, sigma = 1){
y <- list(
n = n,
mu = mu,
sigma = sigma,
x = function(s){runif(y$n, y$mu, y$sigma)},
)
y
}
}
DefineUnif <- function(n=10, mu = 0, sigma = 1){
y <- list(
n = n,
mu = mu,
sigma = sigma,
x = function(){runif(y$n, y$mu, y$sigma)}
)
y
}
varunif <- DefineUnif()
varunif
varunif$x
varunif$x()
varunif$n = 50
varunif$x()
DefineUnif <- function(n=10, mu = 0, sigma = 1){
y <- list(
n = n,
mu = mu,
sigma = sigma,
x = function(){runif(y$n, y$mu, y$sigma)}
s = eval.parent()
)
y
}
DefineUnif <- function(n=10, mu = 0, sigma = 1){
y <- list(
n = n,
mu = mu,
sigma = sigma,
x = function(){runif(y$n, y$mu, y$sigma)},
s = eval.parent()
)
y
}
varunif <- DefineUnif()
attr(varunif)
